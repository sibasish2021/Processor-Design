Resource utilisation for Multiplier unit 
# Info: ***************************************************************
# Info: Device Utilization for 7A100TCSG324
# Info: ***************************************************************
# Info: Resource                          Used    Avail   Utilization
# Info: ---------------------------------------------------------------
# Info: IOs                               231     210     110.00%
# Info: Global Buffers                    0       32        0.00%
# Info: LUTs                              191     63400     0.30%
# Info: CLB Slices                        47      15850     0.30%
# Info: Dffs or Latches                   0       126800    0.00%
# Info: Block RAMs                        0       135       0.00%
# Info: DSP48E1s                          7       240       2.92%
# Info: ---------------------------------------------------------------

# Info: Recommending to try an alternate device ...
# Info: ***************************************************************
# Info: Device Utilization for 7A100TFGG484
# Info: ***************************************************************
# Info: Resource                          Used    Avail   Utilization
# Info: ---------------------------------------------------------------
# Info: IOs                               231     285      81.05%
# Info: Global Buffers                    0       32        0.00%
# Info: LUTs                              191     63400     0.30%
# Info: CLB Slices                        47      15850     0.30%
# Info: Dffs or Latches                   0       126800    0.00%
# Info: Block RAMs                        0       135       0.00%
# Info: DSP48E1s                          7       240       2.92%
# Info: ---------------------------------------------------------------
# Info: ******************************************************************
# Info: Library: work    Cell: Multiplier    View: Multiplierbeh
# Info: ******************************************************************
# Info:  Number of ports :                          231
# Info:  Number of nets :                          1068
# Info:  Number of instances :                      586
# Info:  Number of references to this view :          0
# Info: Total accumulated area :
# Info:  Number of DSP48E1s :                         7
# Info:  Number of LUTs :                           191
# Info:  Number of Primitive LUTs :                 192
# Info:  Number of LUTs with LUTNM/HLUTNM :           2
# Info:  Number of MUX CARRYs :                      94
# Info:  Number of accumulated instances :          586

In this unit I have designed a Multipplier module 

The multiplier unit has following inputs and output
  op1: in std_logic_vector(31 downto 0);
  op2: in std_logic_vector(31 downto 0);
  op3: in std_logic_vector(31 downto 0);
  instr: in ML_subclass_type;
  instruction: ini std_logic_vector(31 downto 0);
  result32: out std_logic_vector(31 downto 0);
  result64: out std_logic_vector(63 downto 0)

I have designed this as a combinational unit 
which takes the inputs and then  calculates the output according the type of instr  variable
In case of mul and mla we run the 32 bit part and modify accordingly
and in case of long multiplication we declare another variable p_s to handle the signed bits

For implementing this I have also modified the Mytypes.vhd to include the ML_subclass_type
This type has all types of multiply instructions which are further used in this multiplier module

I have also changed Encoder,vhd to include multiply which gives the type of multiplyb instruction to 
be performed by analysing the instruction given to it i.e by analysing the bits instruction(23 downto 21)

Test cases
These can be checked by running testMultiplier.vhd
The EP wave can be seen from MultiplierEP.png

Here I have given 4 testcases for each instruction so to tal 24 testcases

1)instruction(20)<='1';
    instr<=mul;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
2)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
3)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
4)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 1 done";
    
5)    instruction(20)<='1';
    instr<=mla;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
6)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
7)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
8)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 2 done";
    
9)    instruction(20)<='1';
    instr<=smull;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
10)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
11)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
12)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 3 done";
    
13)    instruction(20)<='0';
    instr<=umull;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
14)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
15)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
16)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 4 done";
    
17)    instruction(20)<='1';
    instr<=smlal;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
18)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
19)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
20)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 5 done";
    
21)    instruction(20)<='0';
    instr<=umlal;
    
    op1<="00000000000000000000000000001010";
    op2<="00000000000000000000000000001011";
    op3<="00000000000000000000000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
22)    op1<="00000000000000000000011000001010";
    op2<="00000000000000000000000101001011";
    op3<="00000000000000011100000000001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
23)    op1<="00000000000000000000000000011110";
    op2<="00000000000000000000111000001011";
    op3<="00000000000000000000000000001111";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    
24)    op1<="00000000000000000111100000001010";
    op2<="00000000000000010101000000001011";
    op3<="00000000000000000000101010001110";
    wait for 5 ns;
    clock<='0';
    wait for 5 ns;
    clock<='1';
    report "Test 6 done";
    

